// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  password      String?
  name          String?
  email         String         @unique
  emailVerified DateTime?
  phone         String?        
  image         String?
  city          String?
  address       String?
  isGuest       Boolean         @default(true)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  Cart          Cart[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticator")
}

model Product {
  id                     String      @id @default(auto()) @map("_id") @db.ObjectId
  shortId                String?
  name                   String
  priceInJpy             Int?
  priceInVnd             Int
  rootPath               String?
  imagePath              String
  description            String
  isAvailableForPurchase Boolean     @default(true)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  orders                 Order[]
  CartItem               CartItem[]
  OrderItem              OrderItem[]

  @@map("Product")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("Carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("CartItems")
}

model Order {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  pricePaidInVnd Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
  // productId String  @db.ObjectId
  // user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  Product    Product?    @relation(fields: [productId], references: [id])
  productId  String?     @db.ObjectId

  @@map("Order")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("OrderItems")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  slug      String   @unique
  thumbPath String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId

  @@map("Post")
}
